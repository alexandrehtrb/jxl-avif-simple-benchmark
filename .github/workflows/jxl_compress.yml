name: JXL compression

on:
  workflow_call:
    inputs:
      libjxl_version:
        required: true
        type: string
      quality_factor:
        required: true
        type: number

jobs:
  jxl_compress:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Download libjxl
        shell: pwsh
        run: |
          $url = "https://github.com/libjxl/libjxl/releases/download/v${env:LIBJXL_VERSION}/jxl-linux-x86_64-static-v${env:LIBJXL_VERSION}.tar.gz"
          $destinationFile = "libjxl_linux.tar.gz"
          Invoke-WebRequest -Uri $url -OutFile $destinationFile
          mkdir libjxl
          tar xf libjxl_linux.tar.gz -C ./libjxl/
        env:
          LIBJXL_VERSION: ${{ inputs.libjxl_version }}
      
      - name: Compress images and measure times
        shell: pwsh
        run: |
          $inputFiles = Get-ChildItem -Path '.\inputs\' -File;
          mkdir ./outputs/
          $sw = [System.Diagnostics.Stopwatch]::new()
          # careful: don't use $input as variable in PowerShell (forbidden name)
          foreach ($inputFile in $inputFiles)
          {
            $fileNameWithoutExtension = $($inputFile.Name.ToLower().Replace(".jpg","").Replace(".png","").Replace(".gif",""))
            $outputFilePath = "./outputs/${fileNameWithoutExtension}.jxl"
            $sw.Restart()
            if ($inputFile.Name -like "*jpg")
            {
              if ($env:QUALITY_FACTOR -eq "100")
              {
                ./libjxl/tools/cjxl $inputFile.FullName $outputFilePath --lossless_jpeg=1
              }
              else
              {
                ./libjxl/tools/cjxl $inputFile.FullName $outputFilePath -q $env:QUALITY_FACTOR --lossless_jpeg=0
              }
            }
            else
            {
              ./libjxl/tools/cjxl $inputFile.FullName $outputFilePath -q $env:QUALITY_FACTOR
            }
            $sw.Stop()

            $elapsedTimeInSeconds = [math]::ceiling($sw.ElapsedMilliseconds)
            # changing the name of output file to hold elapsed milliseconds
            Rename-Item $outputFilePath "${fileNameWithoutExtension}.${elapsedTimeInSeconds}ms.jxl"
          }
        env:
          QUALITY_FACTOR: ${{ inputs.quality_factor }}

      - name: Upload to workflow results
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0 # no need to compress because JXL already compressed
          name: jxl_results
          path: ./outputs/
